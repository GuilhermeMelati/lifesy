datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                       String   @id @default(cuid())
  createdAt                DateTime @default(now())
  updatedAt                DateTime @updatedAt
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String?  @db.VarChar(500)
  access_token             String?  @db.VarChar(500)
  refresh_token_expires_in Int?
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String?  @db.Text
  session_state            String?
  oauth_token_secret       String?
  oauth_token              String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  expires      DateTime
  user         User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String?

  @@index([userId])
}

model User {
  id            String    @id @default(cuid())
  createdAt     DateTime  @default(now())
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  premium       Boolean?   @default(false)
  accounts      Account[]
  sessions      Session[]
  habits        Habits[]
}

model Habits {
  id        Int     @id @default(autoincrement())
  title     String
  description  String?
  days Days[]
  data HabitsData[]
  user      User?  @relation(fields: [userEmail], references: [email], onDelete: Cascade)
  userEmail    String?
  @@index([userEmail])
}

model HabitsData {
  id   Int @id @default(autoincrement())
  date DateTime
  habit         Habits?    @relation(fields: [habitId], references: [id], onDelete: Cascade)
  habitId       Int?
  @@index([habitId])
}

model Days {
  dayNumber Int @id
  dayName String
  habit         Habits?    @relation(fields: [habitId], references: [id], onDelete: Cascade)
  habitId       Int?
  @@index([habitId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}


